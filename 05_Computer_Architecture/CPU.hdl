// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // determines whether what should be loaded into A is the value 
    // from the instruction memory (e.g. a constant) or the output of ALU
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=MuxOneOut);
    // write to A register only if (i) it's an A instruction or 
    // (ii) it's a C instruction with the d1 bit set
    Not(in=instruction[15], out=isAinstruction);
    Or(a=instruction[5], b=isAinstruction, out=loadA);
    ARegister(in=MuxOneOut, load=loadA, out=ARegOut, out[0..14]=addressM);
    // write to M only if d3=1 and it is a C instruction
    And(a=instruction[3], b=instruction[15], out=writeM);
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=MuxTwoOut);
    ALU(x=DRegOut, y=MuxTwoOut, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=ALUout, out=outM, 
        zr=ALUzr, ng=ALUng);
    // write to D only if d2=1 and it is a C instruction
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=ALUout, load=loadD, out=DRegOut);
    // conditions determining when to load the output of A into PC
    // instruction[0] = j3, instruction[1] = j2, instruction[2] = j1
    Not(in=ALUng, out=notALUng);
    Not(in=ALUzr, out=ALUnonzero);
    And(a=notALUng, b=ALUnonzero, out=ALUpos);
    And(a=instruction[2], b=ALUng, out=j1); 
    And(a=instruction[1], b=ALUzr, out=j2);
    And(a=instruction[0], b=ALUpos, out=j3);
    Or(a=j1, b=j2, out=j1orj2);
    Or(a=j1orj2, b=j3, out=jconditions);
    // the jump should only happen if this is the result of a C instruction
    And(a=jconditions, b=instruction[15], out=loadfromA);
    PC(in=ARegOut, load=loadfromA, inc=true, reset=reset, out[0..14]=pc);
}